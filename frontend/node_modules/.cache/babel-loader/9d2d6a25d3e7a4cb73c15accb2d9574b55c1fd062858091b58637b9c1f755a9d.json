{"ast":null,"code":"var _jsxFileName = \"D:\\\\gym-project\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useCheckin } from '../contexts/CheckinContext';\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst slotAssignments = {\n  'slot1': [],\n  'slot2': [],\n  'slot3': [],\n  'slot4': [],\n  'slot5': [],\n  'slot6': [],\n  'slot7': [],\n  'slot8': []\n};\nconst slots = {\n  'slot1': {\n    start: '14:00',\n    end: '15:00'\n  },\n  'slot2': {\n    start: '06:00',\n    end: '07:00'\n  },\n  'slot3': {\n    start: '15:00',\n    end: '16:00'\n  },\n  'slot4': {\n    start: '16:00',\n    end: '17:00'\n  },\n  'slot5': {\n    start: '17:00',\n    end: '18:00'\n  },\n  'slot6': {\n    start: '18:00',\n    end: '19:00'\n  },\n  'slot7': {\n    start: '19:00',\n    end: '20:00'\n  },\n  'slot8': {\n    start: '20:00',\n    end: '21:00'\n  }\n};\nconst HomePage = () => {\n  _s();\n  const {\n    checkins,\n    setCheckins\n  } = useCheckin();\n  const [rollNo, setRollNo] = useState('');\n  const [message, setMessage] = useState('');\n\n  // send request to server\n\n  async function checkin(rollNo) {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/checkin\", {\n        rollNo\n      });\n      const {\n        message,\n        status\n      } = response.data;\n      if (status === 'checked_in') {\n        setMessage(`Checked in successfully at ${new Date().toLocaleTimeString()}`);\n        setCheckins(prevCheckins => ({\n          ...prevCheckins,\n          [rollNo]: {\n            checkIn: new Date(),\n            slot: 'assignedSlot'\n          } // Make sure to use the correct slot\n        }));\n      } else if (status === 'checked_out') {\n        setMessage(`Checked out successfully at ${new Date().toLocaleTimeString()}`);\n        setCheckins(prevCheckins => ({\n          ...prevCheckins,\n          [rollNo]: {\n            ...prevCheckins[rollNo],\n            checkOut: new Date()\n          }\n        }));\n      } else {\n        setMessage(message); // Handle other messages\n      }\n      alert(message); // Display message\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      console.log(error);\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"An error occurred\");\n      alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"An error occurred\");\n    }\n  }\n  const getCurrentTimeInIST = () => {\n    const date = new Date();\n    const utc = date.getTime() + date.getTimezoneOffset() * 60000;\n    return new Date(utc + 3600000 * 5.5);\n  };\n  const formatDate = date => {\n    return date.toLocaleString('en-IN', {\n      timeZone: 'Asia/Kolkata',\n      hour12: false\n    });\n  };\n  const isValidSlot = slot => {\n    const currentTime = getCurrentTimeInIST();\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n    const slotTime = slots[slot];\n    if (!slotTime) return false;\n    const [startHour, startMinute] = slotTime.start.split(':').map(Number);\n    const [endHour, endMinute] = slotTime.end.split(':').map(Number);\n    return (currentHour > startHour || currentHour === startHour && currentMinute >= startMinute) && (currentHour < endHour || currentHour === endHour && currentMinute <= endMinute);\n  };\n  const handleCheckIn = () => {\n    const currentTime = formatDate(getCurrentTimeInIST());\n    let assignedSlot = null;\n    for (const [slot, rollNumbers] of Object.entries(slotAssignments)) {\n      if (rollNumbers.includes(rollNo)) {\n        assignedSlot = slot;\n        break;\n      }\n    }\n    if (assignedSlot) {\n      if (isValidSlot(assignedSlot)) {\n        if (!checkins[rollNo]) {\n          const newCheckins = {\n            ...checkins,\n            [rollNo]: {\n              checkIn: currentTime,\n              slot: assignedSlot\n            }\n          };\n          setCheckins(newCheckins);\n          setMessage(`Checked in at ${currentTime} for slot ${assignedSlot}`);\n          window.alert(`Checked in at ${currentTime} for slot ${assignedSlot}`); // Show popup alert\n          setRollNo(''); // Clear input field\n        } else {\n          setMessage('Already checked in');\n          window.alert('Already checked in');\n        }\n      } else {\n        setMessage('Not the correct time for this slot');\n        window.alert('Not the correct time for this slot'); // Show popup alert\n      }\n    } else {\n      setMessage('Not your slot');\n      window.alert('Not your slot'); // Show popup alert\n    }\n  };\n  const handleCheckOut = () => {\n    const currentTime = formatDate(getCurrentTimeInIST());\n    if (checkins[rollNo] && !checkins[rollNo].checkOut) {\n      const newCheckins = {\n        ...checkins,\n        [rollNo]: {\n          ...checkins[rollNo],\n          checkOut: currentTime\n        }\n      };\n      setCheckins(newCheckins);\n      setMessage(`Checked out at ${currentTime}`);\n      setRollNo(''); // Clear input field\n    } else {\n      setMessage('You are not checked in or already checked out');\n    }\n  };\n\n  // Determine if the user is checked in\n  const isCheckedIn = checkins[rollNo] && !checkins[rollNo].checkOut;\n  const canCheckIn = !isCheckedIn && rollNo !== '';\n  const canCheckOut = isCheckedIn && rollNo !== '';\n  function clickHandler() {\n    checkin(rollNo);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gym Check-In/Check-Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: rollNo,\n        onChange: e => setRollNo(e.target.value),\n        placeholder: \"Enter Roll Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }, this), rollNo && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickHandler,\n        children: \"checkIn/Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/dashboard\",\n          children: \"Go to Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"jzV30L+rt2L0L67UkN6r+h5q36Y=\", false, function () {\n  return [useCheckin];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useState","useCheckin","Link","axios","jsxDEV","_jsxDEV","slotAssignments","slots","start","end","HomePage","_s","checkins","setCheckins","rollNo","setRollNo","message","setMessage","checkin","response","post","status","data","Date","toLocaleTimeString","prevCheckins","checkIn","slot","checkOut","alert","error","_error$response","_error$response$data","_error$response2","_error$response2$data","console","log","getCurrentTimeInIST","date","utc","getTime","getTimezoneOffset","formatDate","toLocaleString","timeZone","hour12","isValidSlot","currentTime","currentHour","getHours","currentMinute","getMinutes","slotTime","startHour","startMinute","split","map","Number","endHour","endMinute","handleCheckIn","assignedSlot","rollNumbers","Object","entries","includes","newCheckins","window","handleCheckOut","isCheckedIn","canCheckIn","canCheckOut","clickHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","to","_c","$RefreshReg$"],"sources":["D:/gym-project/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useCheckin } from '../contexts/CheckinContext';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport './Home.css'; \r\n\r\n\r\nconst slotAssignments = {\r\n  'slot1': [],\r\n  'slot2': [],\r\n  'slot3': [],\r\n  'slot4': [],\r\n  'slot5': [],\r\n  'slot6': [],\r\n  'slot7': [],\r\n  'slot8': [],\r\n};\r\n\r\nconst slots = {\r\n  'slot1': { start: '14:00', end: '15:00' },\r\n  'slot2': { start: '06:00', end: '07:00' },\r\n  'slot3': { start: '15:00', end: '16:00' },\r\n  'slot4': { start: '16:00', end: '17:00' },\r\n  'slot5': { start: '17:00', end: '18:00' },\r\n  'slot6': { start: '18:00', end: '19:00' },\r\n  'slot7': { start: '19:00', end: '20:00' },\r\n  'slot8': { start: '20:00', end: '21:00' },\r\n};\r\n\r\nconst HomePage = () => {\r\n   \r\n  const { checkins, setCheckins } = useCheckin();\r\n  const [rollNo, setRollNo] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  // send request to server\r\n\r\n  async function checkin(rollNo) {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/checkin\", { rollNo });\r\n      const { message, status } = response.data;\r\n\r\n      if (status === 'checked_in') {\r\n          setMessage(`Checked in successfully at ${new Date().toLocaleTimeString()}`);\r\n          setCheckins(prevCheckins => ({\r\n              ...prevCheckins,\r\n              [rollNo]: { checkIn: new Date(), slot: 'assignedSlot' } // Make sure to use the correct slot\r\n          }));\r\n      } else if (status === 'checked_out') {\r\n          setMessage(`Checked out successfully at ${new Date().toLocaleTimeString()}`);\r\n          setCheckins(prevCheckins => ({\r\n              ...prevCheckins,\r\n              [rollNo]: {\r\n                  ...prevCheckins[rollNo],\r\n                  checkOut: new Date(),\r\n              },\r\n          }));\r\n      } else {\r\n          setMessage(message); // Handle other messages\r\n      }\r\n      alert(message); // Display message\r\n  } catch (error) {\r\n      console.log(error);\r\n      setMessage(error.response?.data?.message || \"An error occurred\");\r\n      alert(error.response?.data?.message || \"An error occurred\");\r\n  }\r\n  }\r\n\r\n\r\n  const getCurrentTimeInIST = () => {\r\n    const date = new Date();\r\n    const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\r\n    return new Date(utc + (3600000 * 5.5));\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    return date.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', hour12: false }); \r\n  };\r\n\r\n  const isValidSlot = (slot) => {\r\n    const currentTime = getCurrentTimeInIST();\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n\r\n    const slotTime = slots[slot];\r\n    if (!slotTime) return false;\r\n\r\n    const [startHour, startMinute] = slotTime.start.split(':').map(Number);\r\n    const [endHour, endMinute] = slotTime.end.split(':').map(Number);\r\n\r\n    return (\r\n      (currentHour > startHour || (currentHour === startHour && currentMinute >= startMinute)) &&\r\n      (currentHour < endHour || (currentHour === endHour && currentMinute <= endMinute))\r\n    );\r\n  };\r\n\r\n  const handleCheckIn = () => {\r\n    const currentTime = formatDate(getCurrentTimeInIST());\r\n    let assignedSlot = null;\r\n\r\n    for (const [slot, rollNumbers] of Object.entries(slotAssignments)) {\r\n      if (rollNumbers.includes(rollNo)) {\r\n        assignedSlot = slot;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (assignedSlot) {\r\n      if (isValidSlot(assignedSlot)) {\r\n        if (!checkins[rollNo]) {\r\n          const newCheckins = {\r\n            ...checkins,\r\n            [rollNo]: { checkIn: currentTime, slot: assignedSlot },\r\n          };\r\n          setCheckins(newCheckins);\r\n          setMessage(`Checked in at ${currentTime} for slot ${assignedSlot}`);\r\n          window.alert(`Checked in at ${currentTime} for slot ${assignedSlot}`); // Show popup alert\r\n          setRollNo(''); // Clear input field\r\n        } else {\r\n          setMessage('Already checked in');\r\n          window.alert('Already checked in'); \r\n        }\r\n      } else {\r\n        setMessage('Not the correct time for this slot');\r\n        window.alert('Not the correct time for this slot'); // Show popup alert\r\n      }\r\n    } else {\r\n      setMessage('Not your slot');\r\n     \r\n      window.alert('Not your slot'); // Show popup alert\r\n    }\r\n  };\r\n\r\n  const handleCheckOut = () => {\r\n    const currentTime = formatDate(getCurrentTimeInIST());\r\n\r\n    if (checkins[rollNo] && !checkins[rollNo].checkOut) {\r\n      const newCheckins = {\r\n        ...checkins,\r\n        [rollNo]: { ...checkins[rollNo], checkOut: currentTime },\r\n      };\r\n      setCheckins(newCheckins);\r\n      setMessage(`Checked out at ${currentTime}`);\r\n      setRollNo(''); // Clear input field\r\n    } else {\r\n      setMessage('You are not checked in or already checked out');\r\n    }\r\n  };\r\n\r\n  // Determine if the user is checked in\r\n  const isCheckedIn = checkins[rollNo] && !checkins[rollNo].checkOut;\r\n  const canCheckIn = !isCheckedIn && rollNo !== '';\r\n  const canCheckOut = isCheckedIn && rollNo !== '';\r\n  function clickHandler(){\r\n    checkin(rollNo);\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n  \r\n    <div className=\"home-container\">\r\n      \r\n      <h1>Gym Check-In/Check-Out</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={rollNo}\r\n        onChange={(e) => setRollNo(e.target.value)}\r\n        placeholder=\"Enter Roll Number\"\r\n      />\r\n      {/* {canCheckIn && <button onClick={handleCheckIn}>Check In</button>}\r\n      {canCheckOut && <button onClick={handleCheckOut}>Check Out</button>} */}\r\n      {rollNo && <button onClick={clickHandler} >checkIn/Out</button>}\r\n      <p>{message}</p>\r\n      \r\n      \r\n      <nav>\r\n        <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n      </nav>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}