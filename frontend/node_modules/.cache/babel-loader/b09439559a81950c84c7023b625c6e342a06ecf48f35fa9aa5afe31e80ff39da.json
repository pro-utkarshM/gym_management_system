{"ast":null,"code":"var _jsxFileName = \"D:\\\\gym-project\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useCheckin } from '../contexts/CheckinContext';\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst slotAssignments = {\n  'slot1': [],\n  'slot2': [],\n  'slot3': [],\n  'slot4': [],\n  'slot5': [],\n  'slot6': [],\n  'slot7': [],\n  'slot8': []\n};\nconst slots = {\n  'slot1': {\n    start: '14:00',\n    end: '15:00'\n  },\n  'slot2': {\n    start: '06:00',\n    end: '07:00'\n  },\n  'slot3': {\n    start: '15:00',\n    end: '16:00'\n  },\n  'slot4': {\n    start: '16:00',\n    end: '17:00'\n  },\n  'slot5': {\n    start: '17:00',\n    end: '18:00'\n  },\n  'slot6': {\n    start: '18:00',\n    end: '19:00'\n  },\n  'slot7': {\n    start: '19:00',\n    end: '20:00'\n  },\n  'slot8': {\n    start: '20:00',\n    end: '21:00'\n  }\n};\nconst HomePage = () => {\n  _s();\n  const {\n    checkins,\n    setCheckins\n  } = useCheckin();\n  const [rollNo, setRollNo] = useState('');\n  const [message, setMessage] = useState('');\n  async function checkin(rollNo) {\n    await axios.post(\"http://localhost:5000/api/checkin\", {\n      rollNo\n    }).then(response => {\n      setMessage(response.data.message);\n      alert(response.data.message);\n    }).catch(error => {\n      setMessage(error.response.data.message);\n      alert(error.response.data.message);\n    });\n  }\n  const getCurrentTimeInIST = () => {\n    const date = new Date();\n    const utc = date.getTime() + date.getTimezoneOffset() * 60000;\n    return new Date(utc + 3600000 * 5.5);\n  };\n  const handleCheckInOut = () => {\n    if (rollNo) {\n      checkin(rollNo);\n    } else {\n      setMessage('Please enter your roll number.');\n      alert('Please enter your roll number.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gym Check-In/Check-Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: rollNo,\n        onChange: e => setRollNo(e.target.value),\n        placeholder: \"Enter Roll Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCheckInOut,\n        children: \"Check In/Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/dashboard\",\n          children: \"Go to Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n/*\r\nconst HomePage = () => {\r\n   \r\n  const { checkins, setCheckins } = useCheckin();\r\n  const [rollNo, setRollNo] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  // send request to server\r\n\r\n  async function checkin(rollNo) {\r\n    await axios.post(\"http://localhost:5000/api/checkin\", {rollNo})\r\n     .then((response) => {\r\n       console.log(response.data);\r\n       setMessage(response.data.message);\r\n       alert(response.data.message);\r\n      })\r\n     .catch((error) => {\r\n        console.log(error);\r\n        setMessage(error.response.data.message);\r\n        alert(error.response.data.message);   \r\n      });\r\n  }\r\n\r\n\r\n  const getCurrentTimeInIST = () => {\r\n    const date = new Date();\r\n    const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\r\n    return new Date(utc + (3600000 * 5.5));\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    return date.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', hour12: false }); \r\n  };\r\n\r\n  const isValidSlot = (slot) => {\r\n    const currentTime = getCurrentTimeInIST();\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n\r\n    const slotTime = slots[slot];\r\n    if (!slotTime) return false;\r\n\r\n    const [startHour, startMinute] = slotTime.start.split(':').map(Number);\r\n    const [endHour, endMinute] = slotTime.end.split(':').map(Number);\r\n\r\n    return (\r\n      (currentHour > startHour || (currentHour === startHour && currentMinute >= startMinute)) &&\r\n      (currentHour < endHour || (currentHour === endHour && currentMinute <= endMinute))\r\n    );\r\n  };\r\n\r\n  const handleCheckIn = () => {\r\n    const currentTime = formatDate(getCurrentTimeInIST());\r\n    let assignedSlot = null;\r\n\r\n    for (const [slot, rollNumbers] of Object.entries(slotAssignments)) {\r\n      if (rollNumbers.includes(rollNo)) {\r\n        assignedSlot = slot;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (assignedSlot) {\r\n      if (isValidSlot(assignedSlot)) {\r\n        if (!checkins[rollNo]) {\r\n          const newCheckins = {\r\n            ...checkins,\r\n            [rollNo]: { checkIn: currentTime, slot: assignedSlot },\r\n          };\r\n          setCheckins(newCheckins);\r\n          setMessage(`Checked in at ${currentTime} for slot ${assignedSlot}`);\r\n          window.alert(`Checked in at ${currentTime} for slot ${assignedSlot}`); // Show popup alert\r\n          setRollNo(''); // Clear input field\r\n        } else {\r\n          setMessage('Already checked in');\r\n          window.alert('Already checked in'); \r\n        }\r\n      } else {\r\n        setMessage('Not the correct time for this slot');\r\n        window.alert('Not the correct time for this slot'); // Show popup alert\r\n      }\r\n    } else {\r\n      setMessage('Not your slot');\r\n     \r\n      window.alert('Not your slot'); // Show popup alert\r\n    }\r\n  };\r\n\r\n  const handleCheckOut = () => {\r\n    const currentTime = formatDate(getCurrentTimeInIST());\r\n\r\n    if (checkins[rollNo] && !checkins[rollNo].checkOut) {\r\n      const newCheckins = {\r\n        ...checkins,\r\n        [rollNo]: { ...checkins[rollNo], checkOut: currentTime },\r\n      };\r\n      setCheckins(newCheckins);\r\n      setMessage(`Checked out at ${currentTime}`);\r\n      setRollNo(''); // Clear input field\r\n    } else {\r\n      setMessage('You are not checked in or already checked out');\r\n    }\r\n  };\r\n\r\n  // Determine if the user is checked in\r\n  const isCheckedIn = checkins[rollNo] && !checkins[rollNo].checkOut;\r\n  const canCheckIn = !isCheckedIn && rollNo !== '';\r\n  const canCheckOut = isCheckedIn && rollNo !== '';\r\n  function clickHandler(){\r\n    checkin(rollNo);\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n  \r\n    <div className=\"home-container\">\r\n      \r\n      <h1>Gym Check-In/Check-Out</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={rollNo}\r\n        onChange={(e) => setRollNo(e.target.value)}\r\n        placeholder=\"Enter Roll Number\"\r\n      />\r\n      {/* {canCheckIn && <button onClick={handleCheckIn}>Check In</button>}\r\n      {canCheckOut && <button onClick={handleCheckOut}>Check Out</button>} */\n/*  {rollNo && <button onClick={clickHandler} >checkIn/Out</button>}\r\n  <p>{message}</p>\r\n  \r\n  \r\n  <nav>\r\n    <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n  </nav>\r\n</div>\r\n</div>\r\n);\r\n};\r\n*/\n_s(HomePage, \"jzV30L+rt2L0L67UkN6r+h5q36Y=\", false, function () {\n  return [useCheckin];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useState","useCheckin","Link","axios","jsxDEV","_jsxDEV","slotAssignments","slots","start","end","HomePage","_s","checkins","setCheckins","rollNo","setRollNo","message","setMessage","checkin","post","then","response","data","alert","catch","error","getCurrentTimeInIST","date","Date","utc","getTime","getTimezoneOffset","handleCheckInOut","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","to","_c","$RefreshReg$"],"sources":["D:/gym-project/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useCheckin } from '../contexts/CheckinContext';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport './Home.css'; \r\n\r\n\r\nconst slotAssignments = {\r\n  'slot1': [],\r\n  'slot2': [],\r\n  'slot3': [],\r\n  'slot4': [],\r\n  'slot5': [],\r\n  'slot6': [],\r\n  'slot7': [],\r\n  'slot8': [],\r\n};\r\n\r\nconst slots = {\r\n  'slot1': { start: '14:00', end: '15:00' },\r\n  'slot2': { start: '06:00', end: '07:00' },\r\n  'slot3': { start: '15:00', end: '16:00' },\r\n  'slot4': { start: '16:00', end: '17:00' },\r\n  'slot5': { start: '17:00', end: '18:00' },\r\n  'slot6': { start: '18:00', end: '19:00' },\r\n  'slot7': { start: '19:00', end: '20:00' },\r\n  'slot8': { start: '20:00', end: '21:00' },\r\n};\r\nconst HomePage = () => {\r\n  const { checkins, setCheckins } = useCheckin();\r\n  const [rollNo, setRollNo] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  async function checkin(rollNo) {\r\n    await axios.post(\"http://localhost:5000/api/checkin\", { rollNo })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        alert(response.data.message);\r\n      })\r\n      .catch((error) => {\r\n        setMessage(error.response.data.message);\r\n        alert(error.response.data.message);\r\n      });\r\n  }\r\n\r\n  const getCurrentTimeInIST = () => {\r\n    const date = new Date();\r\n    const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\r\n    return new Date(utc + (3600000 * 5.5));\r\n  };\r\n\r\n  const handleCheckInOut = () => {\r\n    if (rollNo) {\r\n      checkin(rollNo);\r\n    } else {\r\n      setMessage('Please enter your roll number.');\r\n      alert('Please enter your roll number.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"home-container\">\r\n        <h1>Gym Check-In/Check-Out</h1>\r\n        <input\r\n          type=\"text\"\r\n          value={rollNo}\r\n          onChange={(e) => setRollNo(e.target.value)}\r\n          placeholder=\"Enter Roll Number\"\r\n        />\r\n        <button onClick={handleCheckInOut}>Check In/Out</button>\r\n        <p>{message}</p>\r\n        <nav>\r\n          <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n/*\r\nconst HomePage = () => {\r\n   \r\n  const { checkins, setCheckins } = useCheckin();\r\n  const [rollNo, setRollNo] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  // send request to server\r\n\r\n  async function checkin(rollNo) {\r\n    await axios.post(\"http://localhost:5000/api/checkin\", {rollNo})\r\n     .then((response) => {\r\n       console.log(response.data);\r\n       setMessage(response.data.message);\r\n       alert(response.data.message);\r\n      })\r\n     .catch((error) => {\r\n        console.log(error);\r\n        setMessage(error.response.data.message);\r\n        alert(error.response.data.message);   \r\n      });\r\n  }\r\n\r\n\r\n  const getCurrentTimeInIST = () => {\r\n    const date = new Date();\r\n    const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\r\n    return new Date(utc + (3600000 * 5.5));\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    return date.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', hour12: false }); \r\n  };\r\n\r\n  const isValidSlot = (slot) => {\r\n    const currentTime = getCurrentTimeInIST();\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n\r\n    const slotTime = slots[slot];\r\n    if (!slotTime) return false;\r\n\r\n    const [startHour, startMinute] = slotTime.start.split(':').map(Number);\r\n    const [endHour, endMinute] = slotTime.end.split(':').map(Number);\r\n\r\n    return (\r\n      (currentHour > startHour || (currentHour === startHour && currentMinute >= startMinute)) &&\r\n      (currentHour < endHour || (currentHour === endHour && currentMinute <= endMinute))\r\n    );\r\n  };\r\n\r\n  const handleCheckIn = () => {\r\n    const currentTime = formatDate(getCurrentTimeInIST());\r\n    let assignedSlot = null;\r\n\r\n    for (const [slot, rollNumbers] of Object.entries(slotAssignments)) {\r\n      if (rollNumbers.includes(rollNo)) {\r\n        assignedSlot = slot;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (assignedSlot) {\r\n      if (isValidSlot(assignedSlot)) {\r\n        if (!checkins[rollNo]) {\r\n          const newCheckins = {\r\n            ...checkins,\r\n            [rollNo]: { checkIn: currentTime, slot: assignedSlot },\r\n          };\r\n          setCheckins(newCheckins);\r\n          setMessage(`Checked in at ${currentTime} for slot ${assignedSlot}`);\r\n          window.alert(`Checked in at ${currentTime} for slot ${assignedSlot}`); // Show popup alert\r\n          setRollNo(''); // Clear input field\r\n        } else {\r\n          setMessage('Already checked in');\r\n          window.alert('Already checked in'); \r\n        }\r\n      } else {\r\n        setMessage('Not the correct time for this slot');\r\n        window.alert('Not the correct time for this slot'); // Show popup alert\r\n      }\r\n    } else {\r\n      setMessage('Not your slot');\r\n     \r\n      window.alert('Not your slot'); // Show popup alert\r\n    }\r\n  };\r\n\r\n  const handleCheckOut = () => {\r\n    const currentTime = formatDate(getCurrentTimeInIST());\r\n\r\n    if (checkins[rollNo] && !checkins[rollNo].checkOut) {\r\n      const newCheckins = {\r\n        ...checkins,\r\n        [rollNo]: { ...checkins[rollNo], checkOut: currentTime },\r\n      };\r\n      setCheckins(newCheckins);\r\n      setMessage(`Checked out at ${currentTime}`);\r\n      setRollNo(''); // Clear input field\r\n    } else {\r\n      setMessage('You are not checked in or already checked out');\r\n    }\r\n  };\r\n\r\n  // Determine if the user is checked in\r\n  const isCheckedIn = checkins[rollNo] && !checkins[rollNo].checkOut;\r\n  const canCheckIn = !isCheckedIn && rollNo !== '';\r\n  const canCheckOut = isCheckedIn && rollNo !== '';\r\n  function clickHandler(){\r\n    checkin(rollNo);\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n  \r\n    <div className=\"home-container\">\r\n      \r\n      <h1>Gym Check-In/Check-Out</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={rollNo}\r\n        onChange={(e) => setRollNo(e.target.value)}\r\n        placeholder=\"Enter Roll Number\"\r\n      />\r\n      {/* {canCheckIn && <button onClick={handleCheckIn}>Check In</button>}\r\n      {canCheckOut && <button onClick={handleCheckOut}>Check Out</button>} */\r\n    /*  {rollNo && <button onClick={clickHandler} >checkIn/Out</button>}\r\n      <p>{message}</p>\r\n      \r\n      \r\n      <nav>\r\n        <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n      </nav>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n\r\nexport default HomePage;\r\n"],"mappings":"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iB;QAAAE,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxDjC,OAAA;QAAA6B,QAAA,EAAIlB;MAAO;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBjC,OAAA;QAAA6B,QAAA,eACE7B,OAAA,CAACH,IAAI;UAAC4C,EAAE,EAAC,YAAY;UAAAZ,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXI3B,EAAA,CAjLED,QAAQ;EAAA,QACsBT,UAAU;AAAA;AAAA8C,EAAA,GADxCrC,QAAQ;AA8Ld,eAAeA,QAAQ;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}